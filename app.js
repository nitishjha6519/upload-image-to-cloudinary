const express = require("express");
const faker = require("faker");
const bodyParser = require('body-parser');
const multer = require("multer");
const cloudinary = require('cloudinary').v2;
 const dotenv=require('dotenv')
dotenv.config()
const DatauriParser=require("datauri/parser"); //for multer memoryStorage()
const parser = new DatauriParser();
const path = require("path");

if (typeof (process.env.CLOUDINARY_API_NAME) === 'undefined') {
  console.warn('!! cloudinary config is undefined !!');
  console.warn('export CLOUDINARY_URL or set dotenv file');
} else {
  console.log('cloudinary config:');
  console.log(cloudinary.config());
}
const app = express();

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

app.set('views', './views');
app.set('view engine', 'ejs');

app.use(express.static("public"));


cloudinary.config({
  cloud_name: process.env.CLOUDINARY_API_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// to stote in public a file
// const Imagestorage = multer.diskStorage({
//     destination: function (req, file, cb) {
//         cb(null, './public')
//     },
//      //destination: "./public",
        
//     filename: function (req, file, cb) {
//         cb(null, Date.now() + file.originalname);
//     }
// })
const Imagestorage = multer.memoryStorage()
// upload middleware 
 const upload = multer({ storage: Imagestorage })
  
const users = [];
for (let i =0; i < 10; i++){
    users.push({
    name: faker.name.findName(),
    email: faker.internet.email(),
    image: faker.image.image()
    })
}

app.get("/", (req, res) => {
    res.render("user.ejs", {users});
})

app.get("/form", (req, res) => {
    res.render("form.ejs");
})
// get -- whenever u want to fetch data from server 
// post -- whenever u want to create data in the database/server 
// put/patch ---  whenever u want to update data in the database/server 
// delete --- whenever u want to delete data in the database/server

app.post("/add/user", upload.single("image"), (req, res) => {

    console.log(req.body);
    console.log(req.file);
const extName = path.extname(req.file.originalname).toString();
  const file64 = parser.format(extName, req.file.buffer);
  const filename=file64.content
    // console.log(req.body);
    // Write the code to insert data
    users.push({
        name: req.body.name,
        email: req.body.email,
        image: filename
    })
//     let imageToSavePath=req.file.path
//     let imageToSaveName=req.file.filename
// console.log(imageToSaveName)
// //save user image
    //https://github.com/cloudinary/cloudinary_npm/blob/master/samples/basic/basic.js
// cloudinary.uploader.upload(imageToSavePath, { tags: 'basic_sample' }, function (err, image) {
//   console.log();
//   console.log("** File Upload");
//   if (err) { console.warn(err); }
//   console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
//   console.log("* " + image.public_id);
//   console.log("* " + image.url);

// });
  
 cloudinary.uploader.upload(filename, (error, result) => {
    if (error) {
      res.status(500).send(error);
    } else {
      // result.secure_url is the URL of the uploaded file on Cloudinary
      console.log(result.secure_url);
    }
  });
    res.redirect("/");
});




app.get("/remove/user", (req, res) => {

    // console.log(req.body);
    // Write the code to insert data
    users.shift();
    res.redirect("/");
})


app.get("*", (req, res) => {
    res.status(404).send("PAGE IS NOT FOUND");
})

app.listen(5000, () => console.log("Server is up at 5000"));